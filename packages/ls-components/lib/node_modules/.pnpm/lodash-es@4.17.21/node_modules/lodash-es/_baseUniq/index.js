var A = Object.defineProperty;
var p = (t, n) => A(t, "name", { value: n, configurable: !0 });
import g from "../_SetCache/index.js";
import u from "../_arrayIncludes/index.js";
import w from "../_cacheHas/index.js";
import R from "../_createSet/index.js";
import S from "../_setToArray/index.js";
var C = 200;
function H(t, n, c) {
  var s = -1, o = u, h = t.length, a = !0, e = [], r = e;
  if (h >= C) {
    var m = R(t);
    if (m)
      return S(m);
    a = !1, o = w, r = new g();
  } else
    r = e;
  r:
    for (; ++s < h; ) {
      var i = t[s], f = i;
      if (i = i !== 0 ? i : 0, a && f === f) {
        for (var l = r.length; l--; )
          if (r[l] === f)
            continue r;
        e.push(i);
      } else o(r, f, c) || (r !== e && r.push(f), e.push(i));
    }
  return e;
}
p(H, "baseUniq");
export {
  H as default
};
