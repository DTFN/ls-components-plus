var u = Object.defineProperty;
var i = (t, e) => u(t, "name", { value: e, configurable: !0 });
import o from "../_MapCache/index.js";
var f = "Expected a function";
function p(t, e) {
  if (typeof t != "function" || e != null && typeof e != "function")
    throw new TypeError(f);
  var a = /* @__PURE__ */ i(function() {
    var n = arguments, r = e ? e.apply(this, n) : n[0], c = a.cache;
    if (c.has(r))
      return c.get(r);
    var h = t.apply(this, n);
    return a.cache = c.set(r, h) || c, h;
  }, "memoized");
  return a.cache = new (p.Cache || o)(), a;
}
i(p, "memoize");
p.Cache = o;
export {
  p as default
};
