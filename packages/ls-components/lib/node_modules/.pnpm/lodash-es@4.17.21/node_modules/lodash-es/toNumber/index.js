var o = Object.defineProperty;
var f = (r, t) => o(r, "name", { value: t, configurable: !0 });
import m from "../_baseTrim/index.js";
import s from "../isObject/index.js";
import p from "../isSymbol/index.js";
var n = NaN, e = /^[-+]0x[0-9a-f]+$/i, b = /^0b[01]+$/i, y = /^0o[0-7]+$/i, c = parseInt;
function N(r) {
  if (typeof r == "number")
    return r;
  if (p(r))
    return n;
  if (s(r)) {
    var t = typeof r.valueOf == "function" ? r.valueOf() : r;
    r = s(t) ? t + "" : t;
  }
  if (typeof r != "string")
    return r === 0 ? r : +r;
  r = m(r);
  var i = b.test(r);
  return i || y.test(r) ? c(r.slice(2), i ? 2 : 8) : e.test(r) ? n : +r;
}
f(N, "toNumber");
export {
  N as default
};
