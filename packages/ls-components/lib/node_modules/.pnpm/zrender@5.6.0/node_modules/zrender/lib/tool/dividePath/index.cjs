"use strict";var p=Object.defineProperty;var y=(r,a)=>p(r,"name",{value:a,configurable:!0});Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const O=require("../../core/bbox/index.cjs"),B=require("../../core/BoundingRect/index.cjs"),b=require("../../core/Point/index.cjs"),k=require("../../core/util/index.cjs"),C=require("../../graphic/shape/Polygon/index.cjs"),G=require("../../graphic/shape/Rect/index.cjs"),D=require("../../graphic/shape/Sector/index.cjs"),H=require("../convertPath/index.cjs"),U=require("../path/index.cjs");function I(r,a,v){var i=r[a],n=r[1-a],t=Math.abs(i/n),d=Math.ceil(Math.sqrt(t*v)),u=Math.floor(v/d);u===0&&(u=1,d=v);for(var f=[],e=0;e<d;e++)f.push(u);var l=d*u,x=v-l;if(x>0)for(var e=0;e<x;e++)f[e%d]+=1;return f}y(I,"getDividingGrids");function j(r,a,v){for(var i=r.r0,n=r.r,t=r.startAngle,d=r.endAngle,u=Math.abs(d-t),f=u*n,e=n-i,l=f>Math.abs(e),x=I([f,e],l?0:1,a),o=(l?u:e)/x.length,c=0;c<x.length;c++)for(var g=(l?e:u)/x[c],s=0;s<x[c];s++){var h={};l?(h.startAngle=t+o*c,h.endAngle=t+o*(c+1),h.r0=i+g*s,h.r=i+g*(s+1)):(h.startAngle=t+g*s,h.endAngle=t+g*(s+1),h.r0=i+o*c,h.r=i+o*(c+1)),h.clockwise=r.clockwise,h.cx=r.cx,h.cy=r.cy,v.push(h)}}y(j,"divideSector");function E(r,a,v){for(var i=r.width,n=r.height,t=i>n,d=I([i,n],t?0:1,a),u=t?"width":"height",f=t?"height":"width",e=t?"x":"y",l=t?"y":"x",x=r[u]/d.length,o=0;o<d.length;o++)for(var c=r[f]/d[o],g=0;g<d[o];g++){var s={};s[e]=o*x,s[l]=g*c,s[u]=x,s[f]=c,s.x+=r.x,s.y+=r.y,v.push(s)}}y(E,"divideRect");function L(r,a,v,i){return r*i-v*a}y(L,"crossProduct2d");function F(r,a,v,i,n,t,d,u){var f=v-r,e=i-a,l=d-n,x=u-t,o=L(l,x,f,e);if(Math.abs(o)<1e-6)return null;var c=r-n,g=a-t,s=L(c,g,l,x)/o;return s<0||s>1?null:new b.default(s*f+r,s*e+a)}y(F,"lineLineIntersect");function J(r,a,v){var i=new b.default;b.default.sub(i,v,a),i.normalize();var n=new b.default;b.default.sub(n,r,a);var t=n.dot(i);return t}y(J,"projPtOnLine");function M(r,a){var v=r[r.length-1];v&&v[0]===a[0]&&v[1]===a[1]||r.push(a)}y(M,"addToPoly");function K(r,a,v){for(var i=r.length,n=[],t=0;t<i;t++){var d=r[t],u=r[(t+1)%i],f=F(d[0],d[1],u[0],u[1],a.x,a.y,v.x,v.y);f&&n.push({projPt:J(f,a,v),pt:f,idx:t})}if(n.length<2)return[{points:r},{points:r}];n.sort(function(h,P){return h.projPt-P.projPt});var e=n[0],l=n[n.length-1];if(l.idx<e.idx){var x=e;e=l,l=x}for(var o=[e.pt.x,e.pt.y],c=[l.pt.x,l.pt.y],g=[o],s=[c],t=e.idx+1;t<=l.idx;t++)M(g,r[t].slice());M(g,c),M(g,o);for(var t=l.idx+1;t<=e.idx+i;t++)M(s,r[t%i].slice());return M(s,o),M(s,c),[{points:g},{points:s}]}y(K,"splitPolygonByLine");function T(r){var a=r.points,v=[],i=[];O.fromPoints(a,v,i);var n=new B.default(v[0],v[1],i[0]-v[0],i[1]-v[1]),t=n.width,d=n.height,u=n.x,f=n.y,e=new b.default,l=new b.default;return t>d?(e.x=l.x=u+t/2,e.y=f,l.y=f+d):(e.y=l.y=f+d/2,e.x=u,l.x=u+t),K(a,e,l)}y(T,"binaryDividePolygon");function A(r,a,v,i){if(v===1)i.push(a);else{var n=Math.floor(v/2),t=r(a);A(r,t[0],n,i),A(r,t[1],v-n,i)}return i}y(A,"binaryDivideRecursive");function m(r,a){for(var v=[],i=0;i<a;i++)v.push(U.clonePath(r));return v}y(m,"clone");function N(r,a){a.setStyle(r.style),a.z=r.z,a.z2=r.z2,a.zlevel=r.zlevel}y(N,"copyPathProps");function Q(r){for(var a=[],v=0;v<r.length;)a.push([r[v++],r[v++]]);return a}y(Q,"polygonConvert");function V(r,a){var v=[],i=r.shape,n;switch(r.type){case"rect":E(i,a,v),n=G.default;break;case"sector":j(i,a,v),n=D.default;break;case"circle":j({r0:0,r:i.r,startAngle:0,endAngle:Math.PI*2,cx:i.cx,cy:i.cy},a,v),n=D.default;break;default:var t=r.getComputedTransform(),d=t?Math.sqrt(Math.max(t[0]*t[0]+t[1]*t[1],t[2]*t[2]+t[3]*t[3])):1,u=k.map(H.pathToPolygons(r.getUpdatedPathProxy(),d),function(P){return Q(P)}),f=u.length;if(f===0)A(T,{points:u[0]},a,v);else if(f===a)for(var e=0;e<f;e++)v.push({points:u[e]});else{var l=0,x=k.map(u,function(P){var q=[],z=[];O.fromPoints(P,q,z);var R=(z[1]-q[1])*(z[0]-q[0]);return l+=R,{poly:P,area:R}});x.sort(function(P,q){return q.area-P.area});for(var o=a,e=0;e<f;e++){var c=x[e];if(o<=0)break;var g=e===f-1?o:Math.ceil(c.area/l*a);g<0||(A(T,{points:c.poly},g,v),o-=g)}}n=C.default;break}if(!n)return m(r,a);for(var s=[],e=0;e<v.length;e++){var h=new n;h.setShape(v[e]),N(r,h),s.push(h)}return s}y(V,"split");exports.clone=m;exports.split=V;
