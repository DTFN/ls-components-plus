var a = Object.defineProperty;
var c = (t, e) => a(t, "name", { value: e, configurable: !0 });
import { computed as r, getCurrentInstance as i } from "vue";
import { debugWarn as d } from "../../../utils/error/index.js";
import f from "../../../../../../../lodash-es@4.17.21/node_modules/lodash-es/fromPairs/index.js";
const m = ["class", "style"], p = /^on[A-Z]/, I = /* @__PURE__ */ c((t = {}) => {
  const { excludeListeners: e = !1, excludeKeys: n } = t, l = r(() => ((n == null ? void 0 : n.value) || []).concat(m)), s = i();
  return s ? r(() => {
    var u;
    return f(Object.entries((u = s.proxy) == null ? void 0 : u.$attrs).filter(([o]) => !l.value.includes(o) && !(e && p.test(o))));
  }) : (d("use-attrs", "getCurrentInstance() returned null. useAttrs() must be called at the top of a setup function"), r(() => ({})));
}, "useAttrs");
export {
  I as useAttrs
};
