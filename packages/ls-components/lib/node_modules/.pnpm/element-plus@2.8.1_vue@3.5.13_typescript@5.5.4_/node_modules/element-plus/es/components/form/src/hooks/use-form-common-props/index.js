var a = Object.defineProperty;
var i = (e, o) => a(e, "name", { value: o, configurable: !0 });
import { ref as c, inject as s, computed as l, unref as d } from "vue";
import { formContextKey as f, formItemContextKey as p } from "../../constants/index.js";
import { useProp as n } from "../../../../../hooks/use-prop/index/index.js";
import { useGlobalSize as z } from "../../../../../hooks/use-size/index/index.js";
const F = /* @__PURE__ */ i((e, o = {}) => {
  const t = c(void 0), u = o.prop ? t : n("size"), v = o.global ? t : z(), r = o.form ? { size: void 0 } : s(f, void 0), m = o.formItem ? { size: void 0 } : s(p, void 0);
  return l(() => u.value || d(e) || (m == null ? void 0 : m.size) || (r == null ? void 0 : r.size) || v.value || "");
}, "useFormSize"), K = /* @__PURE__ */ i((e) => {
  const o = n("disabled"), t = s(f, void 0);
  return l(() => o.value || d(e) || (t == null ? void 0 : t.disabled) || !1);
}, "useFormDisabled");
export {
  K as useFormDisabled,
  F as useFormSize
};
