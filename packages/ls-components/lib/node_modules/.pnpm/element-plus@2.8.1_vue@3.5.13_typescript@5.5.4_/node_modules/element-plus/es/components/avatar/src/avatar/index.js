var i = Object.defineProperty;
var t = (r, e) => i(r, "name", { value: e, configurable: !0 });
import { buildProps as o, definePropType as a } from "../../../../utils/vue/props/runtime/index.js";
import { componentSizes as p } from "../../../../constants/size/index.js";
import { isNumber as n } from "../../../../utils/types/index.js";
import { iconPropType as s } from "../../../../utils/vue/icon/index.js";
const S = o({
  size: {
    type: [Number, String],
    values: p,
    default: "",
    validator: /* @__PURE__ */ t((r) => n(r), "validator")
  },
  shape: {
    type: String,
    values: ["circle", "square"],
    default: "circle"
  },
  icon: {
    type: s
  },
  src: {
    type: String,
    default: ""
  },
  alt: String,
  srcSet: String,
  fit: {
    type: a(String),
    default: "cover"
  }
}), d = {
  error: /* @__PURE__ */ t((r) => r instanceof Event, "error")
};
export {
  d as avatarEmits,
  S as avatarProps
};
