"use strict";var w=Object.defineProperty;var o=(s,l)=>w(s,"name",{value:l,configurable:!0});Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});const p=require("vue"),a=require("../../util/index.cjs");function f(s){const l=p.getCurrentInstance(),g=p.ref(!1),n=p.ref([]);return{updateExpandRows:o(()=>{const t=s.data.value||[],e=s.rowKey.value;if(g.value)n.value=t.slice();else if(e){const u=a.getKeysMap(n.value,e);n.value=t.reduce((c,d)=>{const r=a.getRowIdentity(d,e);return u[r]&&c.push(d),c},[])}else n.value=[]},"updateExpandRows"),toggleRowExpansion:o((t,e)=>{a.toggleRowStatus(n.value,t,e)&&l.emit("expand-change",t,n.value.slice())},"toggleRowExpansion"),setExpandRowKeys:o(t=>{l.store.assertRowKey();const e=s.data.value||[],u=s.rowKey.value,c=a.getKeysMap(e,u);n.value=t.reduce((d,r)=>{const i=c[r];return i&&d.push(i.row),d},[])},"setExpandRowKeys"),isRowExpanded:o(t=>{const e=s.rowKey.value;return e?!!a.getKeysMap(n.value,e)[a.getRowIdentity(t,e)]:n.value.includes(t)},"isRowExpanded"),states:{expandRows:n,defaultExpandAll:g}}}o(f,"useExpand");exports.default=f;
