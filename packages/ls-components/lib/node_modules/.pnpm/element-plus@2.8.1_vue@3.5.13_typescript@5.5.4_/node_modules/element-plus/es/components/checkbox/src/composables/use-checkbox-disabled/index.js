var d = Object.defineProperty;
var r = (e, i) => d(e, "name", { value: i, configurable: !0 });
import { inject as m, computed as s } from "vue";
import { checkboxGroupContextKey as c } from "../../constants/index.js";
import { isUndefined as v } from "../../../../../utils/types/index.js";
import { useFormDisabled as b } from "../../../../form/src/hooks/use-form-common-props/index.js";
const k = /* @__PURE__ */ r(({
  model: e,
  isChecked: i
}) => {
  const o = m(c, void 0), l = s(() => {
    var n, t;
    const u = (n = o == null ? void 0 : o.max) == null ? void 0 : n.value, a = (t = o == null ? void 0 : o.min) == null ? void 0 : t.value;
    return !v(u) && e.value.length >= u && !i.value || !v(a) && e.value.length <= a && i.value;
  });
  return {
    isDisabled: b(s(() => (o == null ? void 0 : o.disabled.value) || l.value)),
    isLimitDisabled: l
  };
}, "useCheckboxDisabled");
export {
  k as useCheckboxDisabled
};
