"use strict";var k=Object.defineProperty;var u=(c,e)=>k(c,"name",{value:e,configurable:!0});Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});const p=require("../../../../../../../../@vue_shared@3.5.13/node_modules/@vue/shared/dist/shared.esm-bundler/index.cjs"),b=require("../../../../utils/types/index.cjs"),m=require("../../../../utils/strings/index.cjs");let y=0;const v=u(c=>{const e=[c];let{parent:t}=c;for(;t;)e.unshift(t),t=t.parent;return e},"calculatePathNodes"),n=class n{constructor(e,t,i,s=!1){this.data=e,this.config=t,this.parent=i,this.root=s,this.uid=y++,this.checked=!1,this.indeterminate=!1,this.loading=!1;const{value:h,label:a,children:r}=t,d=e[r],o=v(this);this.level=s?0:i?i.level+1:1,this.value=e[h],this.label=e[a],this.pathNodes=o,this.pathValues=o.map(l=>l.value),this.pathLabels=o.map(l=>l.label),this.childrenData=d,this.children=(d||[]).map(l=>new n(l,t,this)),this.loaded=!t.lazy||this.isLeaf||!b.isEmpty(d)}get isDisabled(){const{data:e,parent:t,config:i}=this,{disabled:s,checkStrictly:h}=i;return(p.isFunction(s)?s(e,this):!!e[s])||!h&&(t==null?void 0:t.isDisabled)}get isLeaf(){const{data:e,config:t,childrenData:i,loaded:s}=this,{lazy:h,leaf:a}=t,r=p.isFunction(a)?a(e,this):e[a];return b.isUndefined(r)?h&&!s?!1:!(Array.isArray(i)&&i.length):!!r}get valueByOption(){return this.config.emitPath?this.pathValues:this.value}appendChild(e){const{childrenData:t,children:i}=this,s=new n(e,this.config,this);return Array.isArray(t)?t.push(e):this.childrenData=[e],i.push(s),s}calcText(e,t){const i=e?this.pathLabels.join(t):this.label;return this.text=i,i}broadcast(e,...t){const i=`onParent${m.capitalize(e)}`;this.children.forEach(s=>{s&&(s.broadcast(e,...t),s[i]&&s[i](...t))})}emit(e,...t){const{parent:i}=this,s=`onChild${m.capitalize(e)}`;i&&(i[s]&&i[s](...t),i.emit(e,...t))}onParentCheck(e){this.isDisabled||this.setCheckState(e)}onChildCheck(){const{children:e}=this,t=e.filter(s=>!s.isDisabled),i=t.length?t.every(s=>s.checked):!1;this.setCheckState(i)}setCheckState(e){const t=this.children.length,i=this.children.reduce((s,h)=>{const a=h.checked?1:h.indeterminate?.5:0;return s+a},0);this.checked=this.loaded&&this.children.filter(s=>!s.isDisabled).every(s=>s.loaded&&s.checked)&&e,this.indeterminate=this.loaded&&i!==t&&i>0}doCheck(e){if(this.checked===e)return;const{checkStrictly:t,multiple:i}=this.config;t||!i?this.checked=e:(this.broadcast("check",e),this.setCheckState(e),this.emit("check"))}};u(n,"Node");let f=n;exports.default=f;
